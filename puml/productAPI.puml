@startuml
actor Client

entity "ProductsController" as Controller

entity "ProductsService" as Service

database "ProductsRepository" as ProductsRepo
database "CategoriesRepository" as CategoriesRepo
database "UsersRepository" as UsersRepo
database "BidsRepository" as BidsRepo

' Create
Client -> Controller : POST /products
activate Controller
Controller -> Service : create(createProductDto)
activate Service
Service -> UsersRepo : findOne(user_id)
activate UsersRepo
UsersRepo --> Service : user
deactivate UsersRepo
Service -> Service : 존재하는 유저인지 확인
alt 유저가 존재하면
  Service -> CategoriesRepo : findOne(c_id)
  activate CategoriesRepo
  CategoriesRepo --> Service : category
  deactivate CategoriesRepo
  Service -> Service : 1차 카테고리가 존재하는지 확인
  alt 1차 카테고리가 존재하면
    alt 2차 카테고리가 있는 제품이면
      Service -> CategoriesRepo : findOne(c_id2)
      activate CategoriesRepo
      CategoriesRepo --> Service : category2
      deactivate CategoriesRepo
      Service -> Service : 2차 카테고리가 유효한지 확인
      alt 2차 카테고리가 유효하면
        Service -> ProductsRepo : save(product)
        activate ProductsRepo
        ProductsRepo --> Service : product
        deactivate ProductsRepo
      else 2차 카테고리가 유효하지 않으면
        Service --> Controller : 유효하지 않은 카테고리 예외 발생
      end
    else 2차 카테고리가 없는 제품이면
      Service -> ProductsRepo : save(product)
      activate ProductsRepo
      ProductsRepo --> Service : product
      deactivate ProductsRepo
    end
  else 1차 카테고리가 존재하지 않으면
    Service --> Controller : 카테고리 찾을 수 없음 예외 발생
  end
else 유저가 존재하지 않으면
  Service --> Controller : 유저 찾을 수 없음 예외 발생
end
Service --> Controller : product
deactivate Service
Controller --> Client : product
deactivate Controller

' Remove
Client -> Controller : DELETE /products/:id
activate Controller
Controller -> Service : remove(id)
activate Service
Service -> ProductsRepo : findOneBy(id)
activate ProductsRepo
ProductsRepo --> Service : product
deactivate ProductsRepo
Service -> Service : 제품이 존재하는지 확인
alt 제품이 존재하면
  Service -> Service : 제품이 Sold 상태인지 확인
  alt 제품이 Sold 상태이면
    Service --> Controller : AlreadySold 예외발생
  else 제품이 Sold 상태가 아니면
    Service -> BidsRepo : find({ where: { products_id: id } })
    activate BidsRepo
    BidsRepo --> Service : relatedBids
    deactivate BidsRepo
    Service -> Service : 제품에 입찰이 있는지 확인
    alt 제품에 입찰이 있으면
      Service --> Controller : 삭제 불가 예외발생
    else 제품에 입찰이 없으면
      Service -> ProductsRepo : delete(id)
      activate ProductsRepo
      ProductsRepo --> Service
      deactivate ProductsRepo
      Service --> Controller : 'success'
    end
  end
else 제품이 존재하지 않으면
  Service --> Controller : 제품을 찾을 수 없음 예외발생
end
deactivate Service
Controller --> Client : response ('success' or exception)
deactivate Controller

' Update
Client -> Controller : PUT /products/:id
activate Controller
Controller -> Service : update(id, updateProductDto)
activate Service
Service -> ProductsRepo : findOneBy(id)
activate ProductsRepo
ProductsRepo --> Service : product
deactivate ProductsRepo
Service -> Service : 제품이 존재하는지 확인
alt 제품이 존재하면
  Service -> Service : 제품이 판매중인지 확인
  alt 제품이 판매중이면
    alt 수정사항에 1차 카테고리가 있으면
      Service -> CategoriesRepo : findOne(c_id)
      activate CategoriesRepo
      CategoriesRepo --> Service : category
      deactivate CategoriesRepo
      Service -> Service : 1차 카테고리가 존재하는지 확인
      alt 1차 카테고리가 존재하는 카테고리면
        alt 수정사항에 2차 카테고리가 있으면
          Service -> CategoriesRepo : findOne(c_id2)
          activate CategoriesRepo
          CategoriesRepo --> Service : category2
          deactivate CategoriesRepo
          Service -> Service : 2차 카테고리가 1차 카테고리에 속하는지 확인
          alt 2차 카테고리가 유효하면
            Service -> ProductsRepo : save(updatedProduct)
            activate ProductsRepo
            ProductsRepo --> Service : updatedProduct
            deactivate ProductsRepo
            Service --> Controller : updatedProduct
          else 2차 카테고리가 유효하지 않으면
            Service --> Controller : 유효하지 않은 카테고리 예외 발생
          end
        else no c_id2
          Service -> ProductsRepo : save(updatedProduct)
          activate ProductsRepo
          ProductsRepo --> Service : updatedProduct
          deactivate ProductsRepo
          Service --> Controller : updatedProduct
        end
      else 1차 카테고리가 존재하지 않는 카테고리면
        Service --> Controller : 찾을 수 없는 카테고리 예외 발생
      end
    else 수정사항에 1차 카테고리가 없으면
      alt 수정사항에 2차 카테고리가 있으면
          Service -> CategoriesRepo : findOne(c_id2)
          activate CategoriesRepo
          CategoriesRepo --> Service : category2
          deactivate CategoriesRepo
          Service -> Service : 2차 카테고리가 현재 1차 카테고리에 속하는지 확인
          alt 2차 카테고리가 유효하면
            Service -> ProductsRepo : save(updatedProduct)
            activate ProductsRepo
            ProductsRepo --> Service : updatedProduct
            deactivate ProductsRepo
            Service --> Controller : updatedProduct
          else 2차 카테고리가 유효하지 않으면
            Service --> Controller : 유효하지 않은 카테고리 예외 발생
          end
        else no c_id2
          Service -> ProductsRepo : save(updatedProduct)
          activate ProductsRepo
          ProductsRepo --> Service : updatedProduct
          deactivate ProductsRepo
          Service --> Controller : updatedProduct
        end
    end
  else 제품이 판매중이 아니면
    Service --> Controller : 유효하지 않은 제품상태 예외 발생
  end
else 제품이 존재하지 않으면
  Service --> Controller : 제품 찾을 수 없음 예외 발생
end
deactivate Service
Controller --> Client : updatedProduct or exception
deactivate Controller


@enduml